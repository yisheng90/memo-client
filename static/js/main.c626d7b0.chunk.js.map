{"version":3,"sources":["hooks/useIdea.jsx","hooks/useSorting.jsx","components/atoms/NotificationCard/index.js","hooks/useNotification.jsx","components/atoms/Textarea/index.jsx","components/atoms/Input/index.jsx","components/molecules/Card/index.jsx","components/atoms/Button/index.jsx","components/atoms/Select/index.jsx","serviceWorker.js","index.js","pages/Dashboard/index.js"],"names":["API_URL","process","headers","Accept","sortOptions","sortByDate","a","b","Date","created_date","getTime","sortByTitle","firstTitle","title","toLowerCase","secondTitle","useSorting","ideas","useState","field","sortable","sortOption","setSortOption","updateSortOption","useCallback","values","prev","sortedIdeas","sort","sortField","disableSorting","enableSorting","updateSortingField","value","NotificationCard","message","onCancel","className","data-testid","onClick","icon","faTimes","size","useNotification","notifications","setNotification","expireNotification","prevValues","pop","useEffect","length","interval","setInterval","clearInterval","notify","Notification","map","notification","index","targetIndex","filter","Textarea","defaultValue","onBlur","onFocus","setValue","showCount","setShowCount","checkShowCount","handleBlur","onChange","event","target","Input","inputEl","useRef","handleChange","current","focus","ref","placeholder","Card","idea","onDelete","onUpdate","enableSort","disableSort","isDelectable","setIsDeletable","createdDate","toLocaleString","handleTitleChange","handleBodyChange","body","onMouseMove","onMouseLeave","faTrash","id","Button","disabled","children","Select","options","selectedValue","e","option","key","Boolean","window","location","hostname","match","ReactDOM","render","React","setIdeas","haveEmptyIdea","find","fetchIdeas","fetch","response","json","data","addIdea","method","deleteIdea","success","updateIdea","params","JSON","stringify","findIndex","useIdea","boardWidth","setBoardWidth","targetRef","setBoardSize","Math","floor","offsetWidth","addEventListener","removeEventListener","ideasElement","style","width","faHeartBroken","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mYAEMA,EAAUC,wBAEVC,EAAU,CACdC,OAAQ,mBACR,eAAgB,oB,qOCJX,IAAMC,EAAc,CAAC,OAAQ,SAE9BC,EAAa,SAACC,EAAGC,GAGrB,OAFkB,IAAIC,KAAKF,EAAEG,cAAcC,UACxB,IAAIF,KAAKD,EAAEE,cAAcC,WAIxCC,EAAc,SAACL,EAAGC,GACtB,IAAMK,EAAaN,EAAEO,MAAMC,cACrBC,EAAcR,EAAEM,MAAMC,cAE5B,OAAIF,EAAaG,EACR,EAGLH,EAAaG,GACP,EAGH,GAGIC,EAAa,SAAAC,GAAU,IAAD,EACGC,mBAAS,CAC3CC,MAAOf,EAAY,GACnBgB,UAAU,IAHqB,mBAC1BC,EAD0B,KACdC,EADc,KAM3BC,EAAmBC,uBACvB,SAAAC,GAAM,OAAIH,GAAc,SAAAI,GAAI,O,yVAAA,IAAUA,EAAV,GAAmBD,QAC/C,IAGEE,EAAcV,EAOlB,OALIA,EAAM,IAAMA,EAAM,GAAGJ,OAASQ,EAAWD,WAC3CO,EACuB,UAArBN,EAAWF,MAAoBF,EAAMW,KAAKjB,GAAeM,EAAMW,KAAKvB,IAGjE,CACLsB,cACAE,UAAWR,EAAWF,MACtBW,eAAgB,kBAAMP,EAAiB,CAAEH,UAAU,KACnDW,cAAe,kBAAMR,EAAiB,CAAEH,UAAU,KAClDY,mBAAoB,SAAAC,GAAK,OAAIV,EAAiB,CAAEJ,MAAOc,OC3C9CC,G,MAAmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OAC9B,yBAAKC,UAAU,qBAAqBC,cAAY,sBAC7CH,EACD,0BACEE,UAAU,4BACVE,QAASH,EACTE,cAAY,6BACZ,kBAAC,IAAD,CAAiBE,KAAMC,IAASC,KAAK,WCT9BC,EAAkB,WAAO,IAAD,EACMzB,mBAAS,IADf,mBAC5B0B,EAD4B,KACbC,EADa,KAG7BC,EAAqB,kBACzBD,GAAgB,SAAAE,GAEd,OADAA,EAAWC,MACJ,YAAID,OA2Bf,OAPAE,qBAAU,WACR,GAAIL,EAAcM,OAAS,EAAG,CAC5B,IAAMC,EAAWC,YAAYN,EAAoB,KACjD,OAAO,kBAAMO,cAAcF,OAE5B,CAACP,IAEG,CACLU,OAAQ,SAAAnB,GAAO,OAAIU,GAAgB,SAAAnB,GAAI,OAAKS,GAAL,mBAAiBT,QACxD6B,aApBmB,kBACnB,yBAAKlB,UAAU,2BACZO,EAAcY,KAAI,SAACC,EAAcC,GAAf,OACjB,kBAAC,EAAD,CACEvB,QAASsB,EACTrB,SAAU,kBAXSuB,EAWgBD,EAVzCb,GAAgB,SAAAE,GAEd,OADAA,EAAaA,EAAWa,QAAO,SAACH,EAAcC,GAAf,OAAyBA,IAAUC,KAC3D,YAAIZ,MAHY,IAAAY,YCNhBE,G,kBAAW,SAAC,GAA4C,IAAD,IAAzCC,oBAAyC,MAA1B,GAA0B,EAAtBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAAc,EACxC9C,mBAAS4C,GAD+B,mBAC3D7B,EAD2D,KACpDgC,EADoD,OAEhC/C,oBAAS,GAFuB,mBAE3DgD,EAF2D,KAEhDC,EAFgD,KAI5DC,EAAiB,kBACrBD,EARmB,IAQWlC,EAAMiB,OAPb,KAmBnBmB,EAAa,WACjBF,GAAa,GACbJ,EAAO9B,IAGT,OACE,oCACE,8BACEK,cAAY,WACZL,MAAOA,GAAS,GAChB+B,QAAS,WACPI,IACAJ,KAEFM,SAxBe,SAAAC,GACLA,EAAMC,OAAOvC,MAEjBiB,QAbS,KAcjBe,EAASM,EAAMC,OAAOvC,OAGxBmC,KAkBIL,OAAQ,kBAAMM,OAEfH,GACC,0BAAM7B,UAAU,yBAAyBC,cAAY,cAClDL,EAAMiB,OADT,IAtCe,QCAVuB,G,MAAQ,SAAC,GAA4C,IAAD,IAAzCX,oBAAyC,MAA1B,GAA0B,EAAtBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAAc,EACrC9C,mBAAS4C,GAD4B,mBACxD7B,EADwD,KACjDgC,EADiD,KAEzDS,EAAUC,iBAAO,MAEjBC,EAAepD,uBAAY,SAAA+C,GAAK,OAAIN,EAASM,EAAMC,OAAOvC,SAAQ,IAQxE,OANAgB,qBAAU,YACHhB,GAASyC,EAAQG,SACpBH,EAAQG,QAAQC,UAEjB,CAAC7C,IAGF,2BACEK,cAAY,QACZyC,IAAKL,EACLzC,MAAOA,EACP+B,QAASA,EACTM,SAAUM,EACVb,OAAQ,kBAAMA,EAAO9B,IACrB+C,YAAY,Y,yjBCfX,IAAMC,EAAO,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,SAAUC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAAkB,EACtCpE,oBAAS,GAD6B,mBACtEqE,EADsE,KACxDC,EADwD,KAEvEC,EAAc,IAAIjF,KAAK0E,EAAKzE,cAAciF,iBAE1CC,EAAoBnE,uBACxB,SAAAS,GACMA,IAAUiD,EAAKrE,OACjBuE,EAAS,KAAKF,EAAN,GAAe,CAAErE,MAAOoB,KAElCoD,MAEF,CAACH,EAAME,EAAUC,IAGbO,EAAmBpE,uBACvB,SAAAS,GACMA,IAAUiD,EAAKW,MACjBT,EAAS,KAAKF,EAAN,GAAe,CAAEW,KAAM5D,KAGjCoD,MAEF,CAACH,EAAME,EAAUC,IAGnB,OACE,yBACE/C,cAAY,kBACZD,UAAS,2BAAsB6C,EAAKrE,OAAS,0BAC7CiF,YAAa,kBAAMN,GAAe,IAClCO,aAAc,kBAAMP,GAAe,KACnC,kBAAC,EAAD,CACE1B,aAAcoB,EAAKrE,MACnBmD,QAASsB,EACTvB,OAAQ4B,EACRX,YAAY,UAGd,0BAAM3C,UAAU,sBAAsBC,cAAY,uBAC/CmD,GAGH,kBAAC,EAAD,CACE3B,aAAcoB,EAAKW,KACnB9B,OAAQ6B,EACR5B,QAASsB,IAGVC,GACC,kBAAC,IAAD,CACE/C,KAAMwD,IACNtD,KAAK,KACLL,UAAU,uBACVC,cAAY,uBACZC,QAAS,kBAAM4C,EAASD,EAAKe,SC3D1BC,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAU5D,EAAb,EAAaA,QAAS6D,EAAtB,EAAsBA,SAAtB,OACpB,4BACE9D,cAAY,SACZD,UAAU,kBACV8D,SAAUA,EACV5D,QAASA,GACR6D,KCNQC,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAejC,EAA3B,EAA2BA,SAA3B,OACpB,4BACEhC,cAAY,SACZD,UAAU,SACVJ,MAAOsE,EACPjC,SAAU,SAAAkC,GAAC,OAAIlC,EAASkC,EAAEhC,OAAOvC,SAChCqE,EAAQ9C,KAAI,SAAAiD,GAAM,OACjB,4BAAQC,IAAKD,EAAQxE,MAAOwE,GACzBA,SCCWE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCOS,WAAO,IAAD,EACItE,IAAzBY,EADqB,EACrBA,aADqB,EXHR,SAAAD,GAAW,IAAD,EACL4D,IAAMhG,SAAS,IADV,mBACxBD,EADwB,KACjBkG,EADiB,KAGzBC,EAAgBnG,EAAMoG,MAAK,SAAAnC,GAAI,OAAKA,EAAKrE,SAEzCyG,EAAU,uCAAG,8BAAAhH,EAAA,sEACMiH,MAAM,GAAD,OAAIvH,EAAJ,WADX,cACXwH,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBP,EAASO,GAHQ,2CAAH,qDAMVC,EAAO,uCAAG,8BAAArH,EAAA,0DACV8G,EADU,iEAESG,MAAM,GAAD,OAAIvH,EAAJ,UAAqB,CAC/C4H,OAAQ,OACR1H,YAJY,cAERsH,EAFQ,gBAMKA,EAASC,OANd,QAMRC,EANQ,SASZP,GAAS,SAAAzF,GAAI,OAAKgG,GAAL,mBAAchG,OATf,2CAAH,qDAaPmG,EAAU,uCAAG,WAAM5B,GAAN,eAAA3F,EAAA,sEACMiH,MAAM,GAAD,OAAIvH,EAAJ,iBAAoBiG,GAAM,CACpD2B,OAAQ,WAFO,cACXJ,EADW,gBAIEA,EAASC,OAJX,cAKRK,SACPX,GAAS,SAAApE,GAAU,OAAIA,EAAWa,QAAO,SAAAsB,GAAI,OAAIA,EAAKe,KAAOA,QAN9C,2CAAH,sDAUV8B,EAAU,uCAAG,WAAMC,GAAN,eAAA1H,EAAA,sEACMiH,MAAM,GAAD,OAAIvH,EAAJ,iBAAoBgI,EAAO/B,IAAM,CAC3D2B,OAAQ,MACR1H,UACA2F,KAAMoC,KAAKC,UAAU,CACnBrH,MAAOmH,EAAOnH,MACdgF,KAAMmC,EAAOnC,SANA,cACX2B,EADW,gBAUEA,EAASC,OAVX,cAWRK,UACPX,GAAS,SAAApE,GACP,IAAMW,EAAQX,EAAWoF,WAAU,SAAAjD,GAAI,OAAIA,EAAKe,KAAO+B,EAAO/B,MAE9D,OADAlD,EAAWW,GAASsE,EACb,YAAIjF,MAEbO,EAAO,GAAD,OAAI0E,EAAOnH,MAAX,wBAjBS,2CAAH,sDAyBhB,OAJAoC,qBAAU,WACRqE,MACC,IAEI,CACLrG,QACAmG,gBACAO,UACAE,aACAE,cW3DgEK,CAFrC,EACP9E,QACdrC,EAFqB,EAErBA,MAAOmG,EAFc,EAEdA,cAAeO,EAFD,EAECA,QAASE,EAFV,EAEUA,WAAYE,EAFtB,EAEsBA,WAFtB,EASzB/G,EAAWC,GALbU,EAJ2B,EAI3BA,YACAE,EAL2B,EAK3BA,UACAC,EAN2B,EAM3BA,eACAC,EAP2B,EAO3BA,cACAC,EAR2B,EAQ3BA,mBAR2B,EAUOd,mBAAS,QAVhB,mBAUtBmH,EAVsB,KAUVC,EAVU,KAWvBC,EAAY5D,iBAAO,MAEnB6D,EAAe,WACnB,IAAMvG,EAAQwG,KAAKC,MAAMH,EAAU1D,QAAQ8D,YAAc,KACzDL,EAAc,GAAD,OAAI,IAAMrG,EAAV,QAGfgB,qBAAU,WAGR,OAFAuF,IACA5B,OAAOgC,iBAAiB,UAAU,kBAAMJ,OACjC,kBAAM5B,OAAOiC,oBAAoB,UAAU,kBAAML,UACvD,IAEH,IAAMM,EAAenH,EAAY6B,KAAI,SAAA0B,GAAI,OACvC,kBAAC,EAAD,CACEA,KAAMA,EACNwB,IAAKxB,EAAKe,GACVX,YAAaxD,EACbuD,WAAYtD,EACZoD,SAAU0C,EACVzC,SAAU2C,OAId,OACE,yBAAK1F,UAAU,YAAYC,cAAY,aACrC,4BAAQD,UAAU,oBAChB,2CAEF,kBAACkB,EAAD,MAEA,yBAAKlB,UAAU,2BACb,kBAAC,EAAD,CAAQ8D,SAAUiB,EAAe7E,QAASoF,GAA1C,cAIA,kBAAC,EAAD,CACErB,QAASlG,EACTkE,SAAUtC,EACVuE,cAAe1E,KAInB,yBAAKQ,UAAU,mBAAmB0C,IAAKwD,GACrC,yBAAKlG,UAAU,0BAA0B0G,MAAO,CAAEC,MAAM,GAAD,OAAKX,KACzD1G,EAAYuB,OAAS,GAAK4F,EAEH,IAAvBnH,EAAYuB,QACX,yBAAKb,UAAU,iCACb,kBAAC,IAAD,CAAiBG,KAAMyG,IAAevG,KAAK,OAC3C,4EDpEE,MAAewG,SAASC,eAAe,SD0HjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c626d7b0.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nconst headers = {\n  Accept: 'application/json',\n  'Content-Type': 'application/json',\n}\n\nexport const useIdea = notify => {\n  const [ideas, setIdeas] = React.useState([])\n\n  const haveEmptyIdea = ideas.find(idea => !idea.title)\n\n  const fetchIdeas = async () => {\n    const response = await fetch(`${API_URL}/ideas`)\n    const data = await response.json()\n    setIdeas(data)\n  }\n\n  const addIdea = async () => {\n    if (haveEmptyIdea) return\n    const response = await fetch(`${API_URL}/ideas`, {\n      method: 'POST',\n      headers,\n    })\n    const data = await response.json()\n\n    if (data) {\n      setIdeas(prev => [data, ...prev])\n    }\n  }\n\n  const deleteIdea = async id => {\n    const response = await fetch(`${API_URL}/idea/${id}`, {\n      method: 'DELETE',\n    })\n    const data = await response.json()\n    if (data.success) {\n      setIdeas(prevValues => prevValues.filter(idea => idea.id !== id))\n    }\n  }\n\n  const updateIdea = async params => {\n    const response = await fetch(`${API_URL}/idea/${params.id}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify({\n        title: params.title,\n        body: params.body,\n      }),\n    })\n\n    const data = await response.json()\n    if (data.success) {\n      setIdeas(prevValues => {\n        const index = prevValues.findIndex(idea => idea.id === params.id)\n        prevValues[index] = params\n        return [...prevValues]\n      })\n      notify(`${params.title} has been updated!`)\n    }\n  }\n\n  useEffect(() => {\n    fetchIdeas()\n  }, [])\n\n  return {\n    ideas,\n    haveEmptyIdea,\n    addIdea,\n    deleteIdea,\n    updateIdea,\n  }\n}\n","import { useState, useCallback } from 'react'\n\nexport const sortOptions = ['Date', 'Title']\n\nconst sortByDate = (a, b) => {\n  const firstDate = new Date(a.created_date).getTime()\n  const secondDate = new Date(b.created_date).getTime()\n  return firstDate - secondDate\n}\n\nconst sortByTitle = (a, b) => {\n  const firstTitle = a.title.toLowerCase()\n  const secondTitle = b.title.toLowerCase()\n\n  if (firstTitle > secondTitle) {\n    return 1\n  }\n\n  if (firstTitle < secondTitle) {\n    return -1\n  }\n\n  return 0\n}\n\nexport const useSorting = ideas => {\n  const [sortOption, setSortOption] = useState({\n    field: sortOptions[0],\n    sortable: true,\n  })\n\n  const updateSortOption = useCallback(\n    values => setSortOption(prev => ({ ...prev, ...values })),\n    []\n  )\n\n  let sortedIdeas = ideas\n\n  if (ideas[0] && ideas[0].title && sortOption.sortable) {\n    sortedIdeas =\n      sortOption.field === 'Title' ? ideas.sort(sortByTitle) : ideas.sort(sortByDate)\n  }\n\n  return {\n    sortedIdeas,\n    sortField: sortOption.field,\n    disableSorting: () => updateSortOption({ sortable: false }),\n    enableSorting: () => updateSortOption({ sortable: true }),\n    updateSortingField: value => updateSortOption({ field: value }),\n  }\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport './style.css'\n\nexport const NotificationCard = ({ message, onCancel }) => (\n  <div className=\"notification__card\" data-testid=\"notification__card\">\n    {message}\n    <span\n      className=\"notification__card--close\"\n      onClick={onCancel}\n      data-testid=\"notification__card--close\">\n      <FontAwesomeIcon icon={faTimes} size=\"xs\" />\n    </span>\n  </div>\n)\n","import React, { useState, useEffect } from 'react'\nimport { NotificationCard } from '../components/atoms/NotificationCard'\n\nexport const useNotification = () => {\n  const [notifications, setNotification] = useState([])\n\n  const expireNotification = () =>\n    setNotification(prevValues => {\n      prevValues.pop()\n      return [...prevValues]\n    })\n\n  const removeNotification = targetIndex =>\n    setNotification(prevValues => {\n      prevValues = prevValues.filter((notification, index) => index !== targetIndex)\n      return [...prevValues]\n    })\n\n  const Notification = () => (\n    <div className=\"notification__container\">\n      {notifications.map((notification, index) => (\n        <NotificationCard\n          message={notification}\n          onCancel={() => removeNotification(index)}\n        />\n      ))}\n    </div>\n  )\n\n  useEffect(() => {\n    if (notifications.length > 0) {\n      const interval = setInterval(expireNotification, 3000)\n      return () => clearInterval(interval)\n    }\n  }, [notifications])\n\n  return {\n    notify: message => setNotification(prev => [message, ...prev]),\n    Notification,\n  }\n}\n","import React, { useState } from 'react'\nimport './style.css'\n\nconst MAX_CHAR_COUNT = 140\nconst SHOW_CHAR_COUNT_AT = 15\n\nexport const Textarea = ({ defaultValue = '', onBlur, onFocus }) => {\n  const [value, setValue] = useState(defaultValue)\n  const [showCount, setShowCount] = useState(false)\n\n  const checkShowCount = () =>\n    setShowCount(MAX_CHAR_COUNT - value.length < SHOW_CHAR_COUNT_AT)\n\n  const handleChange = event => {\n    const value = event.target.value\n\n    if (value.length <= MAX_CHAR_COUNT) {\n      setValue(event.target.value)\n    }\n\n    checkShowCount()\n  }\n\n  const handleBlur = () => {\n    setShowCount(false)\n    onBlur(value)\n  }\n\n  return (\n    <>\n      <textarea\n        data-testid=\"textarea\"\n        value={value || ''}\n        onFocus={() => {\n          checkShowCount()\n          onFocus()\n        }}\n        onChange={handleChange}\n        onBlur={() => handleBlur()}\n      />\n      {showCount && (\n        <span className=\"textarea__word_counter\" data-testid=\"word_count\">\n          {value.length}/{MAX_CHAR_COUNT}\n        </span>\n      )}\n    </>\n  )\n}\n","import React, { useState, useEffect, useRef, useCallback } from 'react'\nimport './style.css'\n\nexport const Input = ({ defaultValue = '', onBlur, onFocus }) => {\n  const [value, setValue] = useState(defaultValue)\n  const inputEl = useRef(null)\n\n  const handleChange = useCallback(event => setValue(event.target.value), [])\n\n  useEffect(() => {\n    if (!value && inputEl.current) {\n      inputEl.current.focus()\n    }\n  }, [value])\n\n  return (\n    <input\n      data-testid=\"input\"\n      ref={inputEl}\n      value={value}\n      onFocus={onFocus}\n      onChange={handleChange}\n      onBlur={() => onBlur(value)}\n      placeholder=\"Title\"\n    />\n  )\n}\n","import React, { useState, useCallback } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport './style.css'\n\nimport { Textarea } from '../../atoms/Textarea'\nimport { Input } from '../../atoms/Input'\n\nexport const Card = ({ idea, onDelete, onUpdate, enableSort, disableSort }) => {\n  const [isDelectable, setIsDeletable] = useState(false)\n  const createdDate = new Date(idea.created_date).toLocaleString()\n\n  const handleTitleChange = useCallback(\n    value => {\n      if (value !== idea.title) {\n        onUpdate({ ...idea, ...{ title: value } })\n      }\n      enableSort()\n    },\n    [idea, onUpdate, enableSort]\n  )\n\n  const handleBodyChange = useCallback(\n    value => {\n      if (value !== idea.body) {\n        onUpdate({ ...idea, ...{ body: value } })\n      }\n\n      enableSort()\n    },\n    [idea, onUpdate, enableSort]\n  )\n\n  return (\n    <div\n      data-testid=\"card__container\"\n      className={`card__container ${!idea.title && 'card__container--empty'}`}\n      onMouseMove={() => setIsDeletable(true)}\n      onMouseLeave={() => setIsDeletable(false)}>\n      <Input\n        defaultValue={idea.title}\n        onFocus={disableSort}\n        onBlur={handleTitleChange}\n        placeholder=\"Title\"\n      />\n\n      <span className=\"card__details--date\" data-testid=\"card__details--date\">\n        {createdDate}\n      </span>\n\n      <Textarea\n        defaultValue={idea.body}\n        onBlur={handleBodyChange}\n        onFocus={disableSort}\n      />\n\n      {isDelectable && (\n        <FontAwesomeIcon\n          icon={faTrash}\n          size=\"xs\"\n          className=\"card__action--delete\"\n          data-testid=\"card__action--delete\"\n          onClick={() => onDelete(idea.id)}\n        />\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport './style.css'\n\nexport const Button = ({ disabled, onClick, children }) => (\n  <button\n    data-testid=\"button\"\n    className=\"button__primary\"\n    disabled={disabled}\n    onClick={onClick}>\n    {children}\n  </button>\n)\n","import React from 'react'\nimport './style.css'\n\nexport const Select = ({ options, selectedValue, onChange }) => (\n  <select\n    data-testid=\"select\"\n    className=\"select\"\n    value={selectedValue}\n    onChange={e => onChange(e.target.value)}>\n    {options.map(option => (\n      <option key={option} value={option}>\n        {option}\n      </option>\n    ))}\n  </select>\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Dashboard } from './pages/Dashboard'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Dashboard />, document.getElementById('root'))\n\nserviceWorker.unregister()\n","import React, { useState, useRef, useEffect } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeartBroken } from '@fortawesome/free-solid-svg-icons'\nimport { useIdea } from '../../hooks/useIdea'\nimport { useSorting, sortOptions } from '../../hooks/useSorting'\nimport { useNotification } from '../../hooks/useNotification'\nimport './style.css'\n\nimport { Card } from '../../components/molecules/Card'\nimport { Button } from '../../components/atoms/Button'\nimport { Select } from '../../components/atoms/Select'\n\nexport const Dashboard = () => {\n  const { Notification, notify } = useNotification()\n  const { ideas, haveEmptyIdea, addIdea, deleteIdea, updateIdea } = useIdea(notify)\n  const {\n    sortedIdeas,\n    sortField,\n    disableSorting,\n    enableSorting,\n    updateSortingField,\n  } = useSorting(ideas)\n  const [boardWidth, setBoardWidth] = useState('100%')\n  const targetRef = useRef(null)\n\n  const setBoardSize = () => {\n    const value = Math.floor(targetRef.current.offsetWidth / 170)\n    setBoardWidth(`${170 * value}px`)\n  }\n\n  useEffect(() => {\n    setBoardSize()\n    window.addEventListener('resize', () => setBoardSize())\n    return () => window.removeEventListener('resize', () => setBoardSize())\n  }, [])\n\n  const ideasElement = sortedIdeas.map(idea => (\n    <Card\n      idea={idea}\n      key={idea.id}\n      disableSort={disableSorting}\n      enableSort={enableSorting}\n      onDelete={deleteIdea}\n      onUpdate={updateIdea}\n    />\n  ))\n\n  return (\n    <div className=\"dashboard\" data-testid=\"dashboard\">\n      <header className=\"header_container\">\n        <h1>Idea Board</h1>\n      </header>\n      <Notification />\n\n      <div className=\"cards_action__container\">\n        <Button disabled={haveEmptyIdea} onClick={addIdea}>\n          + New idea\n        </Button>\n\n        <Select\n          options={sortOptions}\n          onChange={updateSortingField}\n          selectedValue={sortField}\n        />\n      </div>\n\n      <div className=\"cards__container\" ref={targetRef}>\n        <div className=\"cards__container--inner\" style={{ width: `${boardWidth}` }}>\n          {sortedIdeas.length > 0 && ideasElement}\n\n          {sortedIdeas.length === 0 && (\n            <div className=\"cards__container--placeholder\">\n              <FontAwesomeIcon icon={faHeartBroken} size=\"2x\" />\n              <h3>We're sorry. Your idea board is empty.</h3>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}