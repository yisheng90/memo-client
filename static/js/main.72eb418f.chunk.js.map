{"version":3,"sources":["hooks/useIdea.jsx","hooks/useSorting.jsx","components/atoms/NotificationCard/index.js","hooks/useNotification.jsx","components/atoms/Textarea/index.jsx","components/atoms/Input/index.jsx","components/atoms/Modal/index.jsx","components/atoms/Button/index.jsx","components/molecules/Card/index.jsx","components/atoms/Select/index.jsx","serviceWorker.js","index.js","pages/Dashboard/index.js"],"names":["API_URL","process","headers","Accept","sortOptions","sortByDate","a","b","Date","created_date","getTime","sortByTitle","firstTitle","title","toLowerCase","secondTitle","useSorting","ideas","useState","field","sortable","sortOption","setSortOption","updateSortOption","useCallback","values","prev","sortedIdeas","sort","sortField","disableSorting","enableSorting","updateSortingField","value","NotificationCard","message","onCancel","className","data-testid","onClick","icon","faTimes","size","useNotification","notifications","setNotification","expireNotification","prevValues","pop","useEffect","length","interval","setInterval","clearInterval","notify","find","notification","Notification","map","index","targetIndex","filter","Textarea","onBlur","onFocus","onChange","showCount","setShowCount","checkShowCount","handleChange","event","target","handleBlur","e","handleFocus","propType","PropTypes","isRequired","Input","placeholder","inputEl","useRef","current","focus","ref","defaultProps","Modal","isVisible","children","Button","type","block","disabled","push","join","Card","idea","onDelete","onUpdate","enableSort","disableSort","isDelectable","setIsDeletable","formValues","setFormValues","isModalVisible","setModalVisible","createdDate","toLocaleString","handleFieldChange","handleFieldUpdate","body","handleModalClose","removeIdea","id","onPointerMove","onPointerLeave","faTrash","created_at","Select","options","selectedValue","option","key","Boolean","window","location","hostname","match","ReactDOM","render","loading","setLoading","setIdeas","fetchIdeas","fetch","response","json","data","addIdea","method","href","deleteIdea","success","updateIdea","params","JSON","stringify","oldIdea","findIndex","Object","assign","notifySuccessUpdate","oldValues","newValues","useIdea","boardWidth","setBoardWidth","targetRef","setBoardSize","Math","floor","offsetWidth","addEventListener","removeEventListener","ideasElement","style","width","faHeartBroken","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72eb418f.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\n\nconst API_URL = process.env.REACT_APP_API_URL\n\nconst headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n}\n\nexport const useIdea = notify => {\n    const [loading, setLoading] = useState(true)\n    const [ideas, setIdeas] = useState([])\n\n    const fetchIdeas = async () => {\n        setLoading(true)\n        const response = await fetch(`${API_URL}/ideas`)\n        const data = await response.json()\n        setIdeas(data)\n        setLoading(false)\n    }\n\n    const addIdea = async () => {\n        const response = await fetch(`${API_URL}/ideas`, {\n            method: 'POST',\n            headers,\n        })\n        const data = await response.json()\n\n        if (data) {\n            setIdeas(prev => [data, ...prev])\n            window.location.href = `${window.location.href}#${data.id}`\n        }\n    }\n\n    const deleteIdea = async id => {\n        const response = await fetch(`${API_URL}/idea/${id}`, {\n            method: 'DELETE',\n        })\n        const data = await response.json()\n        if (data.success) {\n            fetchIdeas()\n        }\n    }\n\n    const updateIdea = async params => {\n        const response = await fetch(`${API_URL}/idea/${params.id}`, {\n            method: 'PUT',\n            headers,\n            body: JSON.stringify({\n                title: params.title,\n                body: params.body,\n            }),\n        })\n\n        const data = await response.json()\n        let oldIdea = {}\n        if (data.success) {\n            setIdeas(prevValues => {\n                const index = ideas.findIndex(idea => idea.id === params.id)\n                oldIdea = Object.assign(prevValues[index])\n                prevValues[index] = params\n                return [...prevValues]\n            })\n            notifySuccessUpdate(oldIdea, params)\n        }\n    }\n\n\n    const notifySuccessUpdate = (oldValues, newValues) => {\n        if (!newValues.title && !newValues.body) {\n            return notify(`An empty idea has been created!`)\n        }\n\n        if (oldValues.title !== newValues.title && oldValues.body !== newValues.body) {\n            return notify(`Idea ${oldValues.title || 'untitled'} has been updated!`)\n        }\n\n        if (oldValues.title !== newValues.title) {\n            return notify(`The title of ${oldValues.title || 'untitled'} has been updated to ${newValues.title || 'untitled'}!`)\n        }\n\n        if (oldValues.body !== newValues.body) {\n            return notify(`The body of ${oldValues.title || 'untitled'} has been updated!`)\n        }\n    }\n\n    useEffect(() => {\n        if (!loading) return\n        fetchIdeas()\n    }, [loading])\n\n    return {\n        ideas,\n        addIdea,\n        deleteIdea,\n        updateIdea,\n    }\n}\n","import {useState, useCallback} from 'react'\n\nexport const sortOptions = ['Date', 'Title']\n\nconst sortByDate = (a, b) => {\n    const firstDate = new Date(a.created_date).getTime()\n    const secondDate = new Date(b.created_date).getTime()\n    return firstDate - secondDate\n}\n\nconst sortByTitle = (a, b) => {\n    const firstTitle = a.title && a.title.toLowerCase()\n    const secondTitle = b.title && b.title.toLowerCase()\n\n    if (firstTitle > secondTitle) {\n        return 1\n    }\n\n    if (firstTitle < secondTitle) {\n        return -1\n    }\n\n    return 0\n}\n\nexport const useSorting = (ideas) => {\n    const [sortOption, setSortOption] = useState({\n        field: sortOptions[0],\n        sortable: true,\n    })\n\n    const updateSortOption = useCallback(\n        values => setSortOption(prev => ({...prev, ...values})),\n        []\n    )\n\n    let sortedIdeas = ideas\n\n    if (sortOption.sortable) {\n        sortedIdeas = sortOption.field === 'Title' ? ideas.sort(sortByTitle) : ideas.sort(sortByDate)\n    }\n\n    return {\n        sortedIdeas,\n        sortField: sortOption.field,\n        disableSorting: () => updateSortOption({sortable: false}),\n        enableSorting: () => updateSortOption({sortable: true}),\n        updateSortingField: value => updateSortOption({field: value}),\n    }\n}\n","import React from 'react'\nimport * as PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faTimes} from '@fortawesome/free-solid-svg-icons'\nimport './style.css'\n\nexport const NotificationCard = ({message, onCancel}) => (\n    <div className=\"notification__card\" data-testid=\"notification__card\">\n        {message}\n        <span\n            className=\"notification__card--close\"\n            onClick={onCancel}\n            data-testid=\"notification__card--close\">\n      <FontAwesomeIcon icon={faTimes} size=\"xs\"/>\n    </span>\n    </div>\n)\n\nNotificationCard.propTypes = {\n    message: PropTypes.string.isRequired,\n    onCancel: PropTypes.func.isRequired\n}","import React, {useState, useEffect} from 'react'\nimport {NotificationCard} from '../components/atoms/NotificationCard'\n\nexport const useNotification = () => {\n    const [notifications, setNotification] = useState([])\n\n    const expireNotification = () =>\n        setNotification(prevValues => {\n            prevValues.pop()\n            return [...prevValues]\n        })\n\n    const removeNotification = targetIndex =>\n        setNotification(prevValues => {\n            prevValues = prevValues.filter((notification, index) => index !== targetIndex)\n            return [...prevValues]\n        })\n\n    const addNotification = message => setNotification(prevValues => {\n        const notificationExist = prevValues.find(notification => notification === message)\n        if (notificationExist) {\n            return prevValues\n        } else {\n            return [message, ...prevValues]\n        }\n\n    })\n\n    const Notification = () => (\n        <div className=\"notification__container\">\n            {notifications.map((notification, index) => (\n                <NotificationCard\n                    message={notification}\n                    onCancel={() => removeNotification(index)}\n                />\n            ))}\n        </div>\n    )\n\n    useEffect(() => {\n        if (notifications.length > 0) {\n            const interval = setInterval(expireNotification, 3000)\n            return () => clearInterval(interval)\n        }\n    }, [notifications])\n\n    return {\n        notify: addNotification,\n        Notification,\n    }\n}\n","import React, {useState, useCallback} from 'react'\nimport * as PropTypes from 'prop-types';\nimport './style.css'\n\nconst MAX_CHAR_COUNT = 140\nconst SHOW_CHAR_COUNT_AT = 15\n\nexport const Textarea = ({value, onBlur, onFocus, onChange}) => {\n    const [showCount, setShowCount] = useState(false)\n\n    const checkShowCount = useCallback(() => value && setShowCount(MAX_CHAR_COUNT - value.length < SHOW_CHAR_COUNT_AT), [value])\n\n    const handleChange = useCallback(event => {\n        const inputValue = event.target.value\n\n        if (inputValue.length <= MAX_CHAR_COUNT) {\n            onChange(event.target.value)\n        }\n\n        checkShowCount()\n    }, [onChange, checkShowCount])\n\n    const handleBlur = useCallback((e) => {\n        setShowCount(false)\n        onBlur(e.target.value)\n    }, [onBlur])\n\n    const handleFocus = useCallback(() => {\n        checkShowCount()\n        onFocus()\n    }, [onFocus, checkShowCount])\n\n    return (\n        <>\n          <textarea\n              data-testid=\"textarea\"\n              value={value || ''}\n              onFocus={handleFocus}\n              onChange={handleChange}\n              onBlur={handleBlur}/>\n\n            {showCount && (\n                <span className=\"textarea__word_counter\" data-testid=\"word_count\">\n                    {value.length}/{MAX_CHAR_COUNT}\n                </span>\n            )}\n        </>\n    )\n}\n\nTextarea.propType = {\n    value: PropTypes.string,\n    onBlur: PropTypes.func.isRequired,\n    onFocus: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired\n}","import React, {useEffect, useRef, useCallback} from 'react'\nimport * as PropTypes from 'prop-types';\nimport './style.css'\n\nexport const Input = ({value, onBlur, onFocus, onChange, placeholder}) => {\n    const inputEl = useRef(null)\n    const handleChange = useCallback(event => onChange && onChange(event.target.value), [onChange])\n\n    useEffect(() => {\n        if (!value && inputEl.current) {\n            inputEl.current.focus()\n        }\n    }, [value])\n\n    return (\n        <input\n            data-testid=\"input\"\n            ref={inputEl}\n            value={value}\n            onFocus={onFocus}\n            onChange={handleChange}\n            onBlur={() => onBlur(value)}\n            placeholder={placeholder}\n        />\n    )\n}\n\nInput.defaultProps = {\n    value: '',\n    placeholder: 'Please start typing'\n}\n\nInput.propTypes = {\n    value: PropTypes.string,\n    placeholder: PropTypes.string,\n    onBlur: PropTypes.func.isRequired,\n    onFocus: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired\n}\n","import React from 'react'\nimport * as PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport './style.css'\n\nexport const Modal = ({isVisible, onCancel, children}) => {\n    if (isVisible) {\n        return (\n            <div className=\"modal__mask\" onClick={onCancel}>\n                <div className=\"modal__container\" data-testid=\"modal__container\">\n                    <div className=\"modal__container--inner\">\n                        {children}\n                        <span\n                            className=\"modal__action--close\"\n                            onClick={onCancel}\n                            data-testid=\"modal__action--close\">\n                        <FontAwesomeIcon icon={faTimes} size=\"xs\"/>\n                    </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    return null\n}\n\n\nModal.propTypes = {\n    isVisible: PropTypes.bool,\n    onCancel: PropTypes.func.isRequired,\n    children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.element), PropTypes.element, PropTypes.string]).isRequired\n}","import React from 'react'\nimport * as PropTypes from 'prop-types';\nimport './style.css'\n\nconst buttonTypes = ['primary', 'danger']\n\nexport const Button = ({type, block, disabled, onClick, children}) => {\n    let className = ['button__primary']\n\n    if (type === 'danger') {\n        className = ['button__danger']\n    }\n\n    if (block) {\n        className.push('block')\n    }\n\n    return (\n        <button\n            data-testid=\"button\"\n            className={className.join(' ')}\n            disabled={disabled}\n            onClick={() => onClick && onClick()}>\n            {children}\n        </button>\n    )\n}\n\nButton.defaultProps = {\n    type: buttonTypes[0]\n}\n\nButton.propTypes = {\n    type: PropTypes.oneOf(buttonTypes),\n    block: PropTypes.bool,\n    disable: PropTypes.bool,\n    onClick: PropTypes.func,\n    children: PropTypes.string\n}","import React, {useState, useCallback} from 'react'\nimport * as PropTypes from 'prop-types';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faTrash} from '@fortawesome/free-solid-svg-icons'\nimport './style.css'\n\nimport {Textarea} from '../../atoms/Textarea'\nimport {Input} from '../../atoms/Input'\nimport {Modal} from \"../../atoms/Modal\";\nimport {Button} from \"../../atoms/Button\";\n\nexport const Card = ({idea, onDelete, onUpdate, enableSort, disableSort}) => {\n    const [isDelectable, setIsDeletable] = useState(false)\n    const [formValues, setFormValues] = useState(idea)\n    const [isModalVisible, setModalVisible] = useState(false)\n    const createdDate = new Date(idea.created_date).toLocaleString()\n\n    const handleFieldChange = useCallback(value => setFormValues(prevValues => ({...prevValues, ...value})), [])\n\n    const handleFieldUpdate = () => {\n        if (idea.title !== formValues.title || idea.body !== formValues.body) {\n            onUpdate(formValues)\n        }\n        enableSort &&  enableSort()\n    }\n\n    const handleBodyFieldUpdate = () => {\n        if (!formValues.title && !formValues.body) {\n            setModalVisible(true)\n        } else {\n            handleFieldUpdate()\n        }\n    }\n\n    const handleModalClose = removeIdea => {\n        if (removeIdea === true) {\n            onDelete(formValues.id)\n        }\n        setModalVisible(false)\n    }\n\n    return (<>\n            <div\n                id={idea.id}\n                data-testid=\"card__container\"\n                className=\"card__container\"\n                onPointerMove={() => setIsDeletable(true)}\n                onPointerLeave={() => setIsDeletable(false)}>\n\n                <Input\n                    value={formValues.title}\n                    onFocus={disableSort}\n                    onBlur={handleFieldUpdate}\n                    placeholder=\"Untitled\"\n                    onChange={(value) => handleFieldChange({title: value})}\n                />\n\n                <span className=\"card__details--date\" data-testid=\"card__details--date\">\n                {createdDate}\n            </span>\n\n                <Textarea\n                    value={formValues.body}\n                    onBlur={handleBodyFieldUpdate}\n                    onFocus={disableSort}\n                    onChange={(value) => handleFieldChange({body: value})}\n                />\n\n                {isDelectable && (\n                    <FontAwesomeIcon\n                        icon={faTrash}\n                        size=\"xs\"\n                        className=\"card__action--delete\"\n                        data-testid=\"card__action--delete\"\n                        onClick={() => onDelete(idea.id)}\n                    />\n                )}\n            </div>\n\n            <Modal isVisible={isModalVisible} onCancel={() => handleModalClose(false)}>\n                <div className=\"modal__body\">\n                    <h3>This idea is empty.</h3>\n                    <strong>Do you want to remove it?</strong>\n                </div>\n                <div className=\"modal__action--container\">\n                    <Button block onClick={() => handleModalClose(false)}>No. Keep it.</Button>\n                    <Button type=\"danger\" block onClick={() => handleModalClose(true)}>Yes. Remove it.</Button>\n                </div>\n            </Modal>\n        </>\n    )\n}\n\nCard.propType = {\n    idea: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        created_at: PropTypes.string.isRequired,\n        title: PropTypes.string,\n        body: PropTypes.string\n    }).isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onUpdate: PropTypes.func.isRequired,\n    enableSort: PropTypes.func,\n    disableSort: PropTypes.func,\n}","import React from 'react'\nimport * as PropTypes from 'prop-types';\nimport './style.css'\n\nexport const Select = ({options, selectedValue, onChange}) => (\n    <select\n        data-testid=\"select\"\n        className=\"select\"\n        value={selectedValue}\n        onChange={e => onChange(e.target.value)}>\n        {options.map(option => (\n            <option key={option} value={option}>\n                {option}\n            </option>\n        ))}\n    </select>\n)\n\nSelect.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\n    selectedValue: PropTypes.string,\n    onChange: PropTypes.func\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Dashboard } from './pages/Dashboard'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Dashboard />, document.getElementById('root'))\n\nserviceWorker.unregister()\n","import React, {useState, useRef, useEffect} from 'react'\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faHeartBroken} from '@fortawesome/free-solid-svg-icons'\nimport {useIdea} from '../../hooks/useIdea'\nimport {useSorting, sortOptions} from '../../hooks/useSorting'\nimport {useNotification} from '../../hooks/useNotification'\nimport './style.css'\n\nimport {Card} from '../../components/molecules/Card'\nimport {Button} from '../../components/atoms/Button'\nimport {Select} from '../../components/atoms/Select'\n\nexport const Dashboard = () => {\n    const {Notification, notify} = useNotification()\n    const {ideas, loading, addIdea, deleteIdea, updateIdea} = useIdea(notify)\n    const {\n        sortedIdeas,\n        sortField,\n        disableSorting,\n        enableSorting,\n        updateSortingField,\n    } = useSorting(ideas)\n    const [boardWidth, setBoardWidth] = useState('100%')\n    const targetRef = useRef(null)\n\n    const setBoardSize = () => {\n        const value = Math.floor(targetRef.current.offsetWidth / 170)\n        setBoardWidth(`${170 * value}px`)\n    }\n\n    useEffect(() => {\n        setBoardSize()\n        window.addEventListener('resize', () => setBoardSize())\n        return () => window.removeEventListener('resize', () => setBoardSize())\n    }, [])\n\n    const ideasElement = sortedIdeas.map(idea => (\n        <Card\n            idea={idea}\n            key={idea.id}\n            disableSort={disableSorting}\n            enableSort={enableSorting}\n            onDelete={deleteIdea}\n            onUpdate={updateIdea}\n        />\n    ))\n\n    return (\n        <div className=\"dashboard\" data-testid=\"dashboard\">\n            <header className=\"header_container\">\n                <h1>Idea Board</h1>\n            </header>\n            <Notification/>\n\n            <div className=\"cards_action__container\">\n                <Button onClick={addIdea}>\n                    + New idea\n                </Button>\n\n                <Select\n                    options={sortOptions}\n                    onChange={updateSortingField}\n                    selectedValue={sortField}\n                />\n            </div>\n\n            <div className=\"cards__container\" ref={targetRef}>\n                <div className=\"cards__container--inner\" style={{width: `${boardWidth}`}}>\n\n                    {sortedIdeas.length > 0 && ideasElement}\n\n                    {loading && sortedIdeas.length === 0 && (\n                        <div className=\"cards__container--placeholder\">\n                            <FontAwesomeIcon icon={faHeartBroken} size=\"2x\"/>\n                            <h3>Loading....</h3>\n                        </div>\n                    )}\n\n                    {!loading && sortedIdeas.length === 0 && (\n                        <div className=\"cards__container--placeholder\">\n                            <FontAwesomeIcon icon={faHeartBroken} size=\"2x\"/>\n                            <h3>We're sorry. Your idea board is empty.</h3>\n                        </div>\n                    )}\n                </div>\n            </div>\n        </div>\n    )\n}\n"],"sourceRoot":""}